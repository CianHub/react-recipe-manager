{"version":3,"sources":["Helpers/helpers.ts","Components/Display/RecipeIngredientEdit.tsx","Components/Containers/RecipeEdit.tsx","Components/Display/Ingredient.tsx","Components/Display/IngredientList.tsx","Components/Display/Recipe.tsx","Components/Containers/RecipeList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["idGen","Math","random","toString","substr","RecipeEditIngredient","ingredient","handleIngredientChange","deleteIngredient","id","name","amount","handleChange","newValue","console","log","className","type","value","onChange","e","target","onClick","RecipeEdit","recipe","ingredients","instructions","cookTime","servings","useContext","RecipeUpdateContext","handleRecipeChange","selectRecipe","newIngredients","index","findIndex","ingFound","newIngs","filter","ing","htmlFor","min","map","newIng","addIngredient","Ingredient","IngredientList","Recipe","deleteRecipe","RecipeList","recipes","addRecipe","LOCAL_STORAGE_KEY","mockRecipes","React","createContext","App","useState","setRecipes","selectedRecipeId","setSelectedRecipeId","useEffect","localStorage","getItem","foundRecipes","JSON","parse","setItem","stringify","selectedRecipe","find","recipeContext","newRecipe","newRecipes","recipeFound","Provider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bcce16ea.chunk.js","sourcesContent":["export const idGen = (): string => Math.random().toString(36).substr(2, 9);\n","import React from 'react';\nimport { IngredientType } from '../../Types/IngredientType.model';\n\ninterface Props {\n  ingredient: IngredientType;\n  handleIngredientChange: (id: string, ingredient: IngredientType) => void;\n  deleteIngredient: (id: string) => void;\n}\n\nconst RecipeEditIngredient: React.FC<Props> = ({\n  ingredient,\n  handleIngredientChange,\n  deleteIngredient,\n}) => {\n  const { id, name, amount } = ingredient;\n\n  const handleChange = (newValue: any): void => {\n    console.log(newValue);\n    handleIngredientChange(id, {\n      ...ingredient,\n      ...newValue,\n    });\n  };\n\n  return (\n    <>\n      <input\n        className=\"recipe-edit__input\"\n        type=\"text\"\n        value={name}\n        name=\"name\"\n        onChange={(e) => handleChange({ [e.target.name]: e.target.value })}\n      />\n      <input\n        className=\"recipe-edit__input\"\n        type=\"text\"\n        value={amount}\n        name=\"amount\"\n        onChange={(e) => handleChange({ [e.target.name]: e.target.value })}\n      />\n      <button className=\"btn btn--danger\" onClick={() => deleteIngredient(id)}>\n        &times;\n      </button>\n    </>\n  );\n};\n\nexport default RecipeEditIngredient;\n","import React, { useContext } from 'react';\nimport { RecipeUpdateContext } from '../../App';\nimport { idGen } from '../../Helpers/helpers';\nimport { IngredientType } from '../../Types/IngredientType.model';\nimport { RecipeType } from '../../Types/RecipeType.model';\nimport RecipeEditIngredient from '../Display/RecipeIngredientEdit';\n\ninterface Props {\n  recipe: RecipeType;\n}\n\nconst RecipeEdit: React.FC<Props> = ({ recipe }) => {\n  const { name, ingredients, instructions, cookTime, id, servings } = recipe;\n\n  const { handleRecipeChange, selectRecipe } = useContext(RecipeUpdateContext);\n\n  const handleIngredientChange = (id: string, ingredient: IngredientType) => {\n    const newIngredients = [...ingredients];\n    const index = newIngredients.findIndex(\n      (ingFound: IngredientType) => ingFound.id === id\n    );\n    newIngredients[index] = ingredient;\n    handleChange({ ingredients: newIngredients });\n  };\n\n  const handleChange = (newValue: any): void =>\n    handleRecipeChange(id, {\n      ...recipe,\n      ...newValue,\n    });\n\n  const addIngredient = () => {\n    const newIng: IngredientType = {\n      id: idGen(),\n      name: '',\n      amount: '',\n    };\n    handleChange({ ingredients: [...ingredients, newIng] });\n  };\n\n  const deleteIngredient = (id: string) => {\n    const newIngs = ingredients.filter((ing: IngredientType) => ing.id !== id);\n    handleChange({ ingredients: [...newIngs] });\n  };\n\n  return (\n    <div className=\"recipe-edit\">\n      <div className=\"recipe-edit__remove-button-container\">\n        <button\n          className=\"btn recipe-edit__remove-button\"\n          onClick={() => selectRecipe('')}\n        >\n          &times;\n        </button>\n      </div>\n      <div className=\"recipe-edit__details-grid\">\n        <label htmlFor=\"name\" className=\"recipe-edit__label\">\n          Name\n        </label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"name\"\n          className=\"recipe-edit__input\"\n          value={name}\n          onChange={(e) => handleChange({ [e.target.name]: e.target.value })}\n        />\n        <label htmlFor=\"cookTime\" className=\"recipe-edit__label\">\n          Cook Time\n        </label>\n        <input\n          type=\"text\"\n          name=\"cookTime\"\n          id=\"cookTime\"\n          className=\"recipe-edit__input\"\n          value={cookTime}\n          onChange={(e) => handleChange({ [e.target.name]: e.target.value })}\n        />\n        <label htmlFor=\"servings\" className=\"recipe-edit__label\">\n          Servings\n        </label>\n        <input\n          type=\"number\"\n          min=\"1\"\n          name=\"servings\"\n          id=\"servings\"\n          className=\"recipe-edit__input\"\n          value={servings}\n          onChange={(e) => handleChange({ [e.target.name]: +e.target.value })}\n        />\n        <label htmlFor=\"instructions\" className=\"recipe-edit__label\">\n          Instructions\n        </label>\n        <textarea\n          name=\"instructions\"\n          className=\"recipe-edit__input\"\n          id=\"instructions\"\n          value={instructions}\n          onChange={(e) => handleChange({ [e.target.name]: e.target.value })}\n        ></textarea>\n      </div>\n      <br />\n      <label className=\"recipe-edit__label\">Ingredients</label>\n      <div className=\"recipe-edit__ingredient-grid\">\n        <div>Name</div>\n        <div>Amount</div>\n        <div></div>\n        {ingredients.map((ingredient: IngredientType) => (\n          <RecipeEditIngredient\n            ingredient={ingredient}\n            key={idGen()}\n            handleIngredientChange={handleIngredientChange}\n            deleteIngredient={deleteIngredient}\n          />\n        ))}\n      </div>\n      <div className=\"recipe-edit__add-ingredient-btn-container\">\n        <button className=\"btn btn--primary\" onClick={() => addIngredient()}>\n          Add Ingredient\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default RecipeEdit;\n","import React from 'react';\nimport { IngredientType } from '../../Types/IngredientType.model';\n\ninterface Props {\n  ingredient: IngredientType;\n}\n\nconst Ingredient: React.FC<Props> = ({ ingredient: { name, amount } }) => {\n  return (\n    <>\n      <span>{name}</span>\n      <span>{amount}</span>\n    </>\n  );\n};\n\nexport default Ingredient;\n","import React from 'react';\nimport { idGen } from '../../Helpers/helpers';\nimport { IngredientType } from '../../Types/IngredientType.model';\nimport Ingredient from './Ingredient';\n\ninterface Props {\n  ingredients: IngredientType[];\n}\n\nconst IngredientList: React.FC<Props> = ({ ingredients }) => {\n  return (\n    <div className=\"ingredient-grid\">\n      {ingredients.map((ingredient: IngredientType) => (\n        <Ingredient key={idGen()} ingredient={ingredient} />\n      ))}\n    </div>\n  );\n};\n\nexport default IngredientList;\n","import React, { useContext } from 'react';\nimport { RecipeType } from '../../Types/RecipeType.model';\nimport IngredientList from './IngredientList';\n\nimport '../../App.css';\nimport { RecipeUpdateContext } from '../../App';\ninterface Props {\n  recipe: RecipeType;\n}\n\nconst Recipe: React.FC<Props> = ({\n  recipe: { id, name, servings, cookTime, instructions, ingredients },\n}) => {\n  const { deleteRecipe, selectRecipe } = useContext(RecipeUpdateContext);\n\n  return (\n    <div className=\"recipe\">\n      <div className=\"recipe__header\">\n        <h3 className=\"recipe__title\">{name}</h3>\n        <div>\n          <button\n            className=\"btn btn--primary mr-1\"\n            onClick={() => selectRecipe(id)}\n          >\n            Edit\n          </button>\n          <button className=\"btn btn--danger\" onClick={() => deleteRecipe(id)}>\n            Delete\n          </button>\n        </div>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Cook Time:</span>\n        <span className=\"recipe__value\">{cookTime}</span>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Servings:</span>\n        <span className=\"recipe__value\">{servings}</span>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Instructions:</span>\n        <div className=\"recipe__value recipe__instructions recipe__value--indented\">\n          {instructions}\n        </div>\n      </div>\n      <div className=\"recipe__row\">\n        <span className=\"recipe__label\">Ingredients:</span>\n        <div className=\"recipe__value recipe__value--indented\">\n          <IngredientList ingredients={ingredients} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Recipe;\n","import React, { useContext } from 'react';\nimport Recipe from '../Display/Recipe';\nimport { RecipeType } from '../../Types/RecipeType.model';\nimport { RecipeUpdateContext } from '../../App';\nimport { idGen } from '../../Helpers/helpers';\n\ninterface Props {\n  recipes: RecipeType[];\n}\n\nconst RecipeList: React.FC<Props> = ({ recipes }) => {\n  const { addRecipe } = useContext(RecipeUpdateContext);\n\n  return (\n    <div className=\"recipe-list\">\n      <div>\n        {recipes.map((recipe: RecipeType) => (\n          <Recipe key={idGen()} recipe={recipe} />\n        ))}\n      </div>\n      <div className=\"recipe-list__add-recipe-btn-container\">\n        <button className=\"btn btn--primary\" onClick={() => addRecipe()}>\n          Add Recipe\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default RecipeList;\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport RecipeEdit from './Components/Containers/RecipeEdit';\nimport RecipeList from './Components/Containers/RecipeList';\nimport { idGen } from './Helpers/helpers';\nimport { RecipeType } from './Types/RecipeType.model';\n\nconst LOCAL_STORAGE_KEY = 'reactRecipes.recipes';\n\nexport const mockRecipes: RecipeType[] = [\n  {\n    id: idGen(),\n    name: 'Plain Chicken',\n    servings: 3,\n    cookTime: '1:45',\n    instructions: '1: Salt on chicken\\n2: Cook chicken\\n3: Eat chicken',\n    ingredients: [\n      {\n        id: idGen(),\n        name: 'Chicken',\n        amount: '2 entire chickens',\n      },\n      { id: idGen(), name: 'salt', amount: 'a lot' },\n    ],\n  },\n  {\n    id: idGen(),\n    name: 'Plain Pork',\n    servings: 3,\n    cookTime: '1:45',\n    instructions: '1: Paprika on pork\\n2: Cook pork\\n3: Eat pork',\n    ingredients: [\n      {\n        id: idGen(),\n        name: 'Pork',\n        amount: '2 entire pigs',\n      },\n      {\n        id: idGen(),\n        name: 'Paprika',\n        amount: 'a little',\n      },\n    ],\n  },\n];\n\nexport const RecipeUpdateContext = React.createContext<{\n  addRecipe: () => void;\n  deleteRecipe: (id: string) => void;\n  selectRecipe: (id: string) => void;\n  handleRecipeChange: (id: string, recipe: RecipeType) => void;\n}>({\n  addRecipe: () => {},\n  deleteRecipe: () => {},\n  selectRecipe: () => {},\n  handleRecipeChange: () => {},\n});\n\nfunction App() {\n  const [recipes, setRecipes] = useState(mockRecipes);\n  const [selectedRecipeId, setSelectedRecipeId] = useState<string>();\n\n  useEffect(() => {\n    if (localStorage.getItem(LOCAL_STORAGE_KEY)) {\n      const foundRecipes = JSON.parse(\n        localStorage.getItem(LOCAL_STORAGE_KEY) as string\n      );\n      setRecipes(foundRecipes);\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(recipes));\n  }, [recipes]);\n\n  const selectedRecipe: RecipeType | undefined = recipes.find(\n    (recipe: RecipeType) => recipe.id === selectedRecipeId\n  );\n\n  const addRecipe = (): void => {\n    const newRecipe: RecipeType = {\n      id: idGen(),\n      name: '',\n      servings: 0,\n      cookTime: '',\n      ingredients: [\n        {\n          id: idGen(),\n          name: '',\n          amount: '',\n        },\n      ],\n      instructions: '',\n    };\n\n    setRecipes([...recipes, newRecipe]);\n    selectRecipe(newRecipe.id);\n  };\n\n  const deleteRecipe = (id: string): void => {\n    if (selectedRecipeId !== null && selectedRecipeId === id) {\n      setSelectedRecipeId('');\n    }\n    setRecipes(recipes.filter((recipe) => recipe.id !== id));\n  };\n\n  const selectRecipe = (id: string): void => setSelectedRecipeId(id);\n\n  const handleRecipeChange = (id: string, recipe: RecipeType) => {\n    const newRecipes = [...recipes];\n    const index = newRecipes.findIndex(\n      (recipeFound: RecipeType) => recipeFound.id === id\n    );\n    newRecipes[index] = recipe;\n    setRecipes(newRecipes);\n  };\n\n  const recipeContext = {\n    addRecipe,\n    deleteRecipe,\n    selectRecipe,\n    handleRecipeChange,\n  };\n\n  return (\n    <RecipeUpdateContext.Provider value={recipeContext}>\n      <div className=\"App\">\n        <RecipeList recipes={recipes} />\n        {selectedRecipe && <RecipeEdit recipe={selectedRecipe as RecipeType} />}\n      </div>\n    </RecipeUpdateContext.Provider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}